package com.utoronto.timemng.event;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Collection;
import java.util.List;

/**
 * Contains information for the specified event.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class EventDto {
    private static final String TAG = "c2dm_event";
    private static final String EVENT_ID = "eventId";
    private static final String EVENT_TITLE = "eventTitle";
    private static final String YEAR = "year";
    private static final String MONTH = "month";
    private static final String DAY_OF_MONTH = "dayOfMonth";
    private static final String DAY_OF_WEEK = "dayOfWeek";
    private static final String START_TIME = "startTime";
    private static final String END_TIME = "endTime";
    private static final String LOCATION = "location";
    private static final String DESCRIPTION = "description";
    private static final String INVITEE_EMAILS = "inviteeEmails";
    private static final String RECURRING = "recurring";
    private static final String RECURS_ON = "recursOn";
    private static final String IS_ALL_DAY = "isAllDay";

    private final long eventId;
    private final String eventTitle;
    private final int year;
    private final int month;
    private final int dayOfMonth;
    private final int dayOfWeek;
    private final String startTime;
    private final String endTime;
    private final String location;
    private final String description;
    private final Collection<String> inviteeEmails;
    private final boolean recurring;
    private final List<WeekDay> recursOn;
    private final boolean isAllDay;

    /**
     * Default constructor for this class.
     * @param eventId       the unique id of the event as generated by the server.
     * @param eventTitle    the title of the event; cannot be null.
     * @param year          the year the event takes place.
     * @param month         the month the event takes place.
     * @param dayOfMonth    the day the event takes place.
     * @param dayOfWeek     the day of the week the event takes place.
     * @param startTime     the start time of the event.
     * @param endTime       the finish time of the event.
     * @param location      the location of the event; can be null.
     * @param description   the description of the event; can be null;
     * @param inviteeEmails the list of invitees for the event; can be null;
     * @param recurring     true iff the event is reoccurring.
     * @param recursOn      the days of the week the event recurs on.
     * @param isAllDay      true iff the event is all day.
     */
    @JsonCreator
    public EventDto(@JsonProperty(EVENT_ID) final long eventId, @JsonProperty(EVENT_TITLE) final String eventTitle,
                    @JsonProperty(YEAR) final int year, @JsonProperty(MONTH) final int month,
                    @JsonProperty(DAY_OF_MONTH) final int dayOfMonth, @JsonProperty(DAY_OF_WEEK) final int dayOfWeek,
                    @JsonProperty(START_TIME) final String startTime, @JsonProperty(END_TIME) final String endTime,
                    @JsonProperty(LOCATION) final String location, @JsonProperty(DESCRIPTION) final String description,
                    @JsonProperty(INVITEE_EMAILS) final Collection<String> inviteeEmails,
                    @JsonProperty(RECURRING) final boolean recurring,
                    @JsonProperty(RECURS_ON) final List<WeekDay> recursOn,
                    @JsonProperty(IS_ALL_DAY) final boolean isAllDay) {
        super();
        if (null != eventTitle) {
            this.eventId = eventId;
            this.eventTitle = eventTitle;
            this.year = year;
            this.month = month;
            this.dayOfMonth = dayOfMonth;
            this.dayOfWeek = dayOfWeek;
            this.startTime = startTime;
            this.endTime = endTime;
            this.location = location;
            this.description = description;
            this.inviteeEmails = inviteeEmails;
            this.recurring = recurring;
            this.recursOn = recursOn;
            this.isAllDay = isAllDay;
        } else {
            throw new IllegalArgumentException("Title of event cannot be null");
        }
    }

    /**
     * @return true iff the event is recurring.
     */
    @JsonProperty(RECURRING)
    public final boolean isRecurring() {
        return this.recurring;
    }

    /**
     * Get the id of the event.
     * @return  the event's unique id.
     */
    @JsonProperty(EVENT_ID)
    public final long getEventId() {
        return this.eventId;
    }

    /**
     * Get the title of the event.
     * @return  the title of the event.
     */
    @JsonProperty(EVENT_TITLE)
    public final String getEventTitle() {
        return this.eventTitle;
    }

    /**
     * Gets the year of the event.
     * @return  string representation of the year for the event.
     */
    @JsonProperty(YEAR)
    public final int getYear() {
        return this.year;
    }

    /**
     * Gets the month of the event.
     * @return  string representation of the month for the event.
     */
    @JsonProperty(MONTH)
    public final int getMonth() {
        return this.month;
    }

    /**
     * Gets the day of month of the event.
     * @return  string representation of the day of month.
     */
    @JsonProperty(DAY_OF_MONTH)
    public final int getDayOfMonth() {
        return this.dayOfMonth;
    }

    /**
     * Gets the day of week for the event.
     * @return  string representation of the day of week.
     */
    @JsonProperty(DAY_OF_WEEK)
    public final int getDayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * Gets the start time for the event.
     * @return  string representation of the start time.
     */
    @JsonProperty(START_TIME)
    public final String getStartTime() {
        return this.startTime;
    }

    /**
     * Gets the finish time for the event.
     * @return  sting representation of the finish time for the event.
     */
    @JsonProperty(END_TIME)
    public final String getEndTime() {
        return this.endTime;
    }

    /**
     * Gets the location of the event.
     * @return  string representation of the location of the event.
     */
    @JsonProperty(LOCATION)
    public final String getLocation() {
        return this.location;
    }

    /**
     * Gets the description of the event.
     * @return  string representation of the description of the event.
     */
    @JsonProperty(DESCRIPTION)
    public final String getDescription() {
        return this.description;
    }

    /**
     * Gets the list of the invitee emails.
     * @return  list of strings for invitee emails.
     */
    @JsonProperty(INVITEE_EMAILS)
    public final Collection<String> getInviteeEmails() {
        return this.inviteeEmails;
    }

    /**
     * Gets the days of week on which the event will reoccur.
     * @return  type for day of week
     */
    @JsonProperty(RECURS_ON)
    public final List<WeekDay> getRecursOn() {
        return this.recursOn;
    }

    /**
     * @return  true iff this is an all-day event.
     */
    @JsonProperty(IS_ALL_DAY)
    public final boolean isAllDay() {
        return this.isAllDay;
    }
}
